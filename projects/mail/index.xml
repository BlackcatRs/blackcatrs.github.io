<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Install Your Own Mail Server on Vithurshan SELVARAJAH</title><link>https://www.atomicl.net/projects/mail/</link><description>Recent content in Install Your Own Mail Server on Vithurshan SELVARAJAH</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 19 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.atomicl.net/projects/mail/index.xml" rel="self" type="application/rss+xml"/><item><title>DomainKeys Identified Mail (DKIM)</title><link>https://www.atomicl.net/projects/mail/domainkeys-identified-mail/</link><pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/domainkeys-identified-mail/</guid><description>Email sender spoofing involves pretending to control another person&amp;#39;s email address. Scammers often send emails with a sender address like someone@paypal.com and hope that the recipient will fall for it and trust them. In fact, SMTP doesn&amp;#39;t care what sender address you send from. Many email service providers require you to send emails only with your own email address. But some don&amp;#39;t.
To avoid this problem, a new method was conceived that add a cryptographic signature to the header of an email, which the recipient can check to verify the authenticity of the sender and the integrity of the email.</description></item><item><title>About SMTP Server — Postfix</title><link>https://www.atomicl.net/projects/mail/postfix/</link><pubDate>Wed, 19 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/postfix/</guid><description>Introduction The Postfix software is responsible for transferring or receiving mails from other SMTP server using SMTP protocol. It uses a concept called address class to group recipients based on their mail delivery method and only accept mail from domains in the address class. There are three types of address classes:
Canonical domains (also called local domains) Hosted domains (Virtual mailbox domains + Virtual alias domains) Relay domains And finally there are two mandatory email addresses for every domain that you host.</description></item><item><title>About IMAP Server — Dovecot</title><link>https://www.atomicl.net/projects/mail/dovecot/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/dovecot/</guid><description> Dovecot is a software that:
Gets emails destined to your users from Postfix and saves them to disk. Executes user-based sieve filter rules (e.g. move emails to different folders based on certain criteria or to send automated vacation responses). Allows the user to fetch emails using POP3 or IMAP protocol.</description></item><item><title>Configure Database — MySQL</title><link>https://www.atomicl.net/projects/mail/configure-db/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/configure-db/</guid><description>In this section we will create a database mailserver and two users. The first user mailadmin will be able to modify the database data and is intended for mail server administrator. The other user mailserver can only read the database data and is intended for server processes.
First we need to create two random passwords for these users using the pwgen tool:
pwgen -s1 30 2 Take a note of the passwords or store them somewhere safe.</description></item><item><title>Configure Dovecot</title><link>https://www.atomicl.net/projects/mail/configure-dovecot/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/configure-dovecot/</guid><description>Configure Mailbox Owner First we need to create a new system user that will own all virtual mailboxes for security reasons. The following shell commands will create a system group vmail with group ID (GID) 5000 and a system user vmail with user ID (UID) 5000. Make sure that UID and GID are not yet used or choose another – the number can be anything between 1000 and 65000 that is not yet used:</description></item><item><title>Configure Postfix</title><link>https://www.atomicl.net/projects/mail/configure-postfix/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/configure-postfix/</guid><description>Configure Domain Postfix receives an email for user1@example1.com and wants to find out if example1.com is a virtual mailbox domain. It will run the below SQL query and replace %s by example1.com. If it finds such a row in the virtual_domains table it will return a 1. Actually it does not matter what exactly is returns as long as there is a result.
Edit the file /etc/postfix/mysql-virtual-mailbox-domains.cf:
user = mailserver password = x893dNj4stkHy1MKQq0USWBaX4ZZdq hosts = 127.</description></item><item><title>Deny Forged Sender Addresses</title><link>https://www.atomicl.net/projects/mail/forged-sender/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/forged-sender/</guid><description>A forged sender address means that someone claims to be someone else. Let’s say that user1 has authenticated and the mail server trusts him. Nothing keeps user1 from impersonating someone else and sending email in his name.
Postfix provides a setting called smtpd_sender_login_maps to prevent the problem:
sudo postconf smtpd_sender_login_maps=mysql:/etc/postfix/mysql-email2email.cf Now create a map file at /etc/postfix/mysql-email2email.cf that Postfix use to search for user&amp;#39;s mail address:
user = mailserver password = x893dNj4stkHy1MKQq0USWBaX4ZZdq hosts = 127.</description></item><item><title>DMARC</title><link>https://www.atomicl.net/projects/mail/dmarc/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/dmarc/</guid><description>DMARC stands for Domain-based message authentication, reporting and conformance. DMARC is not a product but it is a freely available technical specification. DMARC tells the recipeient&amp;#39;s SMTP server to allow, reject or quarantine when SPF and DKIM verification is not valid. Create DMARC Record Go to your DNS manager and add a TXT record. In the name field, enter _dmarc. In the value field, enter the following:
v=DMARC1; p=none; pct=100; rua=mailto:dmarc-reports@example1.</description></item><item><title>Obtain a TLS Certificate</title><link>https://www.atomicl.net/projects/mail/obtain-certificate/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/obtain-certificate/</guid><description>We need a TLS certificate to encrypt communication. It will be used in two places:
Postfix (to encrypt SMTP communication where possible) Dovecot (to encrypt IMAP communication and deny any unencrypted traffic) But before requesting a certificate from the CA, we need to choose a hostname for the mail server.
Choosing a Hostname for Mail Server A certificate is issued for a fully qualified domain name like mail.example.com and it will be assigned to the Common Name (CN) attribute in a certificate.</description></item><item><title>Optional — Quotas</title><link>https://www.atomicl.net/projects/mail/quotas/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/quotas/</guid><description>Quotas 1 are size limits in terms of disk space for users. You can ensure that users do not waste arbitrary amounts of disk space, but are forced to clean up old emails from time to time.
The magic happens in two places:
Postfix needs to reject new emails if the user’s mailbox is over quota. Dovecot needs to keep track of the quota and how much the user has already used up of it.</description></item><item><title>Optional — Block Spam</title><link>https://www.atomicl.net/projects/mail/block-spam/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/block-spam/</guid><description>Reject Invalid EHLO/HELO Hostname Some spammers don’t provide a valid HELO/EHLO hostname during SMTP communication. They can be non-fully qualified domain name, or a domain name doesn’t exist or only for an internal network. For example, a spammer using an Amazon EC2 instance to send spam is logged on my server as follows:
Aug 16 04:21:13 email postfix/smtpd[7070]: connect from ec2-54-237-201-103.compute-1.amazonaws.com[54.237.201.103] Aug 16 04:21:13 email policyd-spf[7074]: prepend Received-SPF: None (mailfrom) identity=mailfrom; client-ip=54.</description></item><item><title>Postfix and Dovecot Communication</title><link>https://www.atomicl.net/projects/mail/postfix-dovecot-com/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/postfix-dovecot-com/</guid><description>In a previous chapters we made sure that Postfix knows which emails it is allowed to receive. Now what to do with the email?
It has to be saved to disk into the mailbox of the mail user who is waiting for it. You could let Postfix handle that using its built-in mail delivery agent (MDA) called virtual. However compared to the capabilities that Dovecot provides like server-based sieve rules or quotas, the Postfix delivery agent is pretty basic.</description></item><item><title>Postfix Submission Service</title><link>https://www.atomicl.net/projects/mail/postfix-subm/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/postfix-subm/</guid><description>End users should not use port 25 but rather the submission service on TCP port 587 (as described in RFC 4409). The idea is to use port 25 to transport emails through the Mail Transport Agent (MTA) from one server to server and port 587 to submit emails through the Mail Submission Agent (MSA) from a user to a mail server.
In order to enable the submission port, we need to edit the file /etc/postfix/master.</description></item><item><title>Sender Policy Framework (SPF)</title><link>https://www.atomicl.net/projects/mail/spf/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/spf/</guid><description>A Sender Policy Framework (SPF) is a method to verify that the mail server sending the email is authorized to send mail on behalf of the domain.
The receiving SMTP mail server queries the DNS server of the domain found in the header of the received email — Return-Path, for a TXT record. This record contains the IP addresses of the authorized mail servers defined by the domain owner to send mail on behalf of the domain in question.</description></item><item><title>SMTP Authentication</title><link>https://www.atomicl.net/projects/mail/smtp-auth/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/smtp-auth/</guid><description>Postfix Delegates Authentication to Dovecot We have already configured Dovecot to know everything about users from the SQL database. So let&amp;#39;s tell Postfix to use the Dovecot server as an authentication server to verify the username and password. Run these commands on the shell:
sudo postconf smtpd_sasl_type=dovecot sudo postconf smtpd_sasl_path=private/auth sudo postconf smtpd_sasl_auth_enable=yes Postfix can send authentication request to Dovecot through a socket file located at chroot directory — /var/spool/postfix/private/auth.</description></item><item><title>SPF and DKIM Check</title><link>https://www.atomicl.net/projects/mail/spf-dkim-chk/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/spf-dkim-chk/</guid><description>Send A Email to Gmail You can now send a test email from your mail server to your Gmail account to see if the SPF and DKIM checks are successful. On the right side of an email opened in Gmail, click the show original button from the drop-down menu to see the verification status:
SPF: PASS with IP XXX.XXX.XXX.XXX Learn more DKIM: &amp;#39;PASS&amp;#39; with domain example1.com Learn more DMARC: &amp;#39;PASS&amp;#39; Learn more Our Postfix server also performs SPF and DKIM checks when receiving mail.</description></item><item><title>Test IMAP</title><link>https://www.atomicl.net/projects/mail/test-imap/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/test-imap/</guid><description> Send a test mail to the user:
swaks --to user1@example1.com --server localhost Then use mutt to read the mail on the IMAP server:
mutt -f imaps://user1@example1.com@example1.com</description></item><item><title>Tips/Tricks</title><link>https://www.atomicl.net/projects/mail/tips/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://www.atomicl.net/projects/mail/tips/</guid><description>How to Read Postfix Log ? Open a new terminal and read the log continuously:
sudo tail -f /var/log/mail.log While reading the log file, open a new terminal on the SMTP server and send a test mail:
swaks --to user1@example1.com --server localhost If all works as expected your mail.log will show a lot of technical information about the email delivery:
postfix/smtpd[29225]: connect from localhost.localdomain[127.0.0.1] Postfix receives an incoming SMTP connection.</description></item></channel></rss>